@page "/UserLogin"
@layout LoginLayout
@inject HttpClient Http
@using System.Net.Http.Json;
@using System.Text.Json
@using System.Threading
@using AdminPortal.Services
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager nav
@inject StoreDataService storeDataService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<LoginForm OnValidSubmit="PostRequestLogin" LoginModel="usrLogin" />


@if (loadingbit == 2) {
    <FaderCount>
        <Alerts  Htmlstring=@errorMesssage  AlertType ="danger" />
    </FaderCount>
}else if (loadingbit == 1){
    <FaderCount>
    <LoadingModal/>
    </FaderCount>
}

@code{

    private LoginData usrLogin = new LoginData();
    string errorMesssage ="";
    int loadingbit = 0;

    string navEvaluation ="";
        protected override async Task OnInitializedAsync()
        {
            await localStore.ClearAsync();
        }
            
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            await localStore.ClearAsync();
        }

    private async Task PostRequestLogin()
    {
        
        loadingbit =1;
        var newLoging =  new LoginData {

            Email = usrLogin.Email,
            Password = usrLogin.Password

        };
        //remove Authorization
        Http.DefaultRequestHeaders.Remove("Authorization");
        //remove Authorization
        var Uri =  "api/UserAccount/Login";
        var response = await Http.PostAsJsonAsync(Uri,newLoging);
        var result = await response.Content.ReadFromJsonAsync<UserToken>();
        Thread.Sleep(10000);
        var token = result.token;
        var Id = result.Id;
            if (token != null){
                //Session on brower local storage
                //await localStore.SetItemAsync("token", token);
                await sessionStorage.SetItemAsync("token", token);
                await localStore.SetItemAsync("Id", Id);
                navEvaluation = await storeDataService.StoreValidationByUser();
                
                if (navEvaluation == "1"){
                    nav.NavigateTo("/Index");
                }else if (navEvaluation == "2"){
                    nav.NavigateTo("/StoreSetup");
                }
            } else  {
                loadingbit =2;
                errorMesssage = $"Error : Invalid Login";
            } 
    }


}

