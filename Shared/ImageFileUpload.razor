@using System.Threading
@using AdminPortal.Services
@inject StoreDataService storeDataService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IDisposable
@inject HttpClient http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage




<h3>Select your store logo</h3>

<EditForm EditContext="editContext" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        Picture: <InputFile OnChange="OnChange" class="form-control" />
        <!--<ValidationMessage For="() => store.StoreLogoImage" />-->
        @if (Status =="Updated") {
            <FaderCount>
            <LoadingModal/>
            <label>Updating</label>
            </FaderCount>
        }
    </div>
    <button class="btn btn-primary">Change Picture</button>

</EditForm>

@code
{
    private string Status = "";
    private CancellationTokenSource cancelation;
    private EditContext editContext;
    private StoreLogo store;
    private ResponseState result = new ResponseState();
    public IBrowserFile File = null;
    private MultipartFormDataContent content = new MultipartFormDataContent();
    StreamContent fileContent = null;
    protected override void OnInitialized()
    {
        cancelation = new CancellationTokenSource();
        store = new StoreLogo();
        editContext = new EditContext(store);
    }
    private async Task OnChange(InputFileChangeEventArgs e)
    {

    var maxAllowedFiles = 1;
        
        File = e.File;
        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
                if (imageFile.ContentType == "image/png" || imageFile.ContentType == "image/jpeg" || imageFile.ContentType == "image/gif" ) 
                    {
                        store.StoreLogoImage = imageFile;
                        store.StoreShortName =  await localStorage.GetItemAsStringAsync("storeShortName");
                        
                        content = new MultipartFormDataContent();
                        content.Add(new StringContent(store.StoreShortName), "StoreShortName");
                        var fileContent = new StreamContent(store.StoreLogoImage.OpenReadStream());
                        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(store.StoreLogoImage.ContentType);
                        fileContent.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data")
                        {
                        Name = "StoreLogoImage",
                        FileName = imageFile.Name
                        };
                        content.Add(fileContent);

                        //Debug values
                        Console.WriteLine($"File :{imageFile.Name}");
                        Console.WriteLine($"Contenido :{store.StoreLogoImage.ContentType}");
                        Console.WriteLine($"Tama√±o :{store.StoreLogoImage.Size}");

                    }      
        }
        
    }

    private async Task OnSubmit()
    {
    
        var result = await storeDataService.putStoreLogo(content);

        if (result.state == "Updated") {

            Status = "Updated";

        }else {
            Status = "Failed";
        }
        //Debug Value
        Console.WriteLine($"Resultado :{result}");
    }

    public void Dispose()
    {
        cancelation.Cancel();
    }

}